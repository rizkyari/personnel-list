{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","delete","state","data","splice","modalidx","setState","toggle","handleChange","selectedOption","some","entry","unshift","dataSearch","modal","modalperson","bind","axios","get","then","res","results","filter","item","index","console","log","person","this","Option","components","SingleValue","options","map","value","label","name","first","last","className","placeholder","onChange","style","height","alt","src","picture","thumbnail","padding","width","key","rowSpan","Button","color","onClick","toggledel","Modal","isOpen","ModalHeader","ModalBody","ModalFooter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0b84e40.chunk.js","sourcesContent":["import React from \"react\";\nimport { components } from \"react-select\";\nimport Select from \"react-select\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: null,\n      data: [], //Initial 5 data\n      dataSearch: [], //Initial 10 data\n      modal: false,\n      modalperson: null,\n      modalidx: null\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  componentDidMount() {\n    axios.get(`https://randomuser.me/api/?results=10`).then(res => {\n      const data = res.data.results.filter((item, index) => index < 0);\n      const dataSearch = res.data.results;\n      this.setState({ data });\n      this.setState({ dataSearch });\n      console.log(this.state.data);\n    });\n  }\n\n  delete = () => {\n    this.state.data.splice(this.state.modalidx, 1);\n    this.setState({ data: this.state.data });\n    this.toggle();\n  };\n\n  toggledel(person, index) {\n    this.setState({ modalperson: person });\n    this.setState({ modalidx: index });\n    this.setState({\n      modal: !this.state.modal\n    });\n    console.log(this.state.modalperson);\n    console.log(this.state.modalidx);\n  }\n\n  toggle() {\n    this.setState({\n      modal: !this.state.modal\n    });\n  }\n\n  handleChange = selectedOption => {\n    this.setState({ selectedOption }, () => {\n      const { data, selectedOption } = this.state;\n      const isExist = data.some(entry => entry === selectedOption.entry);\n      if (!isExist) {\n        data.unshift(selectedOption.entry);\n        this.setState({ data });\n      }\n    });\n  };\n\n  render() {\n    const { selectedOption, data, dataSearch } = this.state;\n    const { Option, SingleValue } = components;\n    const options = dataSearch.map((entry, index) => ({\n      value: index,\n      label: entry.name.first + \" \" + entry.name.last,\n      entry\n    }));\n    const singleOption = props => (\n      <Option {...props}>\n        <div style={{ height: 40 }}>\n          <img\n            alt=\"optImg\"\n            style={{ height: 35 }}\n            src={props.data.entry.picture.thumbnail}\n          />\n          <div\n            style={{\n              padding: 5\n            }}\n          >\n            {props.data.label}\n          </div>\n        </div>\n      </Option>\n    );\n    const singleValue = props => (\n      <SingleValue {...props}>\n        <div\n          style={{\n            height: 40,\n            width: 450\n          }}\n        >\n          <img\n            alt=\"selectImg\"\n            style={{\n              height: 35\n            }}\n            src={props.data.entry.picture.thumbnail}\n          />\n          <div\n            style={{\n              padding: 5\n            }}\n          >\n            {props.data.label}\n          </div>\n        </div>\n      </SingleValue>\n    );\n\n    return (\n      <div>\n        <div className=\"search\">\n          <Select\n            placeholder=\"Pilih personalia...\"\n            onChange={this.handleChange}\n            components={{ Option: singleOption, SingleValue: singleValue }}\n            value={selectedOption}\n            options={options}\n          />\n        </div>\n        <table className=\"maintable\">\n          {data.map((person, index) => {\n            return (\n              <tbody>\n                <tr key={index}>\n                  <td rowSpan=\"1\">\n                    <img src={person.picture.thumbnail} alt=\"profile pic.\" />\n                    <h5 className=\"name\">\n                      {person.name.first} {person.name.last}{\" \"}\n                    </h5>\n                    <div className=\"bb\">\n                      <Button\n                        color=\"primary\"\n                        // onClick={() => this.edit(person, index)}\n                      >\n                        edit\n                      </Button>{\" \"}\n                      <Button\n                        color=\"danger\"\n                        //onClick={() => this.delete(person, index)}\n                        onClick={() => this.toggledel(person, index)}\n                      >\n                        Delete\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n                <Modal\n                  isOpen={this.state.modal}\n                  toggle={this.toggle}\n                  className={this.props.className}\n                >\n                  <ModalHeader toggle={this.toggle}>\n                    Delete Personalia\n                  </ModalHeader>\n                  <ModalBody>Yakin ingin menghapus personalia ini?</ModalBody>\n                  <ModalFooter>\n                    <Button color=\"primary\" onClick={() => this.delete()}>\n                      Ya\n                    </Button>{\" \"}\n                    <Button color=\"secondary\" onClick={this.toggle}>\n                      Tidak\n                    </Button>\n                  </ModalFooter>\n                </Modal>\n              </tbody>\n            );\n          })}\n        </table>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}